package de.dlr.ivf.tapas.environment;

import com.opencsv.CSVParser;
import com.opencsv.CSVParserBuilder;
import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;
import com.opencsv.exceptions.CsvException;
import de.dlr.ivf.tapas.environment.dao.ParametersDao;
import de.dlr.ivf.tapas.environment.dao.ServersDao;
import de.dlr.ivf.tapas.environment.dao.SimulationsDao;
import de.dlr.ivf.tapas.environment.dao.exception.DaoDeleteException;
import de.dlr.ivf.tapas.environment.dao.exception.DaoInsertException;
import de.dlr.ivf.tapas.environment.dao.exception.DaoReadException;
import de.dlr.ivf.tapas.environment.dao.exception.DaoUpdateException;
import de.dlr.ivf.tapas.environment.dto.ParameterEntry;
import de.dlr.ivf.tapas.environment.dto.ServerEntry;
import de.dlr.ivf.tapas.environment.dto.SimulationEntry;
import de.dlr.ivf.tapas.environment.model.SimulationState;
import lombok.Builder;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * This class manages everything in a tapas environment. It provides a link to the dao layer and thus the functionality
 * to retrieve, add and remove simulations as well as servers.
 * Currently this class is not thread safe and access to it should be synchronized outside. This might change in the
 * future.
 */
@Builder
public class TapasEnvironment {

    private final SimulationsDao simulationsDao;
    private final ServersDao serversDao;
    private final ParametersDao parametersDao;


    /**
     * Adds a simulation to the environment from a legacy simulation runtime file.
     * @param parameterFile runtime file containing all parameters for a tapas run.
     * @throws IOException when the runtime file is not parseable or readable.
     * @throws IllegalArgumentException when read parameters are empty.
     */
    public SimulationEntry addSimulation(File parameterFile) throws IOException, IllegalArgumentException {

        String simKey = EnvironmentHelpers.generateSimulationKey();

        //first extract the parameters
        Map<String, String> parameters;

        try {
            parameters = readParameters(parameterFile, simKey);
        } catch (CsvException e) {
            throw new IOException("Unable to read parse simulation file: "+parameterFile.getAbsolutePath(), e);
        }

        if(parameters.isEmpty()){
            throw new IllegalArgumentException("Simulation without parameters. Simulation file: "+parameterFile.getAbsolutePath());
        }

        //create a simulation entry, persist it and retrieve the autogenerated id
        SimulationEntry simulation = SimulationEntry.builder()
                .simDescription("some description")
                .simInsertedTime(Timestamp.valueOf(LocalDateTime.now()))
                .simKey(simKey)
                .simProgress(0)
                .build();

        try {
            int simId = simulationsDao.save(simulation);
            simulation.setId(simId);
        }catch (DaoInsertException e){
            throw new IOException("Unable to persist simulation.", e);
        }

        //create parameter entries and persist
        Collection<ParameterEntry> parameterEntries = parameters.entrySet()
                .stream()
                .map(entry -> ParameterEntry.builder()
                        .simId(simulation.getId())
                        .simKey(simKey)
                        .paramKey(entry.getKey())
                        .paramValue(entry.getValue())
                        .build())
                .toList();
        try {
            parametersDao.insert(parameterEntries);
        }catch (DaoInsertException e){
            //remove the simulation
            removeSimulation(simulation); //todo think about what is happening with the exception

            throw new IOException("Unable to persist parameter entriesfor simultation with id: "+simulation.getId(), e);
        }

        //now update the simulation state
        simulation.setSimState(SimulationState.READY);
        try {
            simulationsDao.update(simulation.getId(), simulation);
        }catch (DaoUpdateException e){
            //remove simulation and parameters
            removeSimulation(simulation);

            throw new IOException("Unable to update simulation state.", e);
        }

        return simulation;
    }

    /**
     * Removes a simulation from the environment. First the simulation is removed and then its parameters.
     * @param simulation the simulation to remove from the environment.
     * @throws IOException when an error occured during the removal of the simulation or its parameters.
     */
    public void removeSimulation(SimulationEntry simulation) throws IOException{

        try {
            simulationsDao.remove(simulation.getId());
            parametersDao.removeBySimulationId(simulation.getId());
        } catch (DaoDeleteException e) {
            throw new IOException("unable to remove simulation with id: "+ simulation.getId(), e);
        }
    }

    /**
     * Retrieves all simulations from the tapas environment.
     * @return a map with simulation id to simulation entry mappings.
     * @throws IOException when an error during reading the simulation entries occured.
     */
    public Map<Integer, SimulationEntry> loadSimulations() throws IOException {
        try{
            Collection<SimulationEntry> simulationEntries = simulationsDao.load();

            return simulationEntries.stream()
                    .collect(Collectors.toMap(
                            sim -> sim.getId(),
                            sim -> sim
                    ));
        }catch (DaoReadException e){
            e.printStackTrace();
            throw new IOException(e);
        }
    }

    public void addServer(ServerEntry serverEntry) throws IOException {
        try{
            serversDao.insert(serverEntry);
        } catch (DaoInsertException e) {
            e.printStackTrace();
            throw new IOException(e);
        }
    }

    public void removeServers(Collection<ServerEntry> serverEntries) throws IOException{
        try{
            serversDao.removeServers(serverEntries);
        } catch (DaoDeleteException e) {
            e.printStackTrace();
            throw new IOException(e);
        }
    }

    public Map<String, ServerEntry> loadServers() throws IOException {
        try{
            Collection<ServerEntry> serverEntries = serversDao.load();

            return serverEntries.stream()
                    .collect(Collectors.toMap(
                            server -> server.getServerIp(),
                            server -> server
                    ));
        }catch (DaoReadException e){
            e.printStackTrace();
            throw new IOException(e);
        }
    }


    /**
     *  This is mostly a port from the old simulation control and will be removed in the future
     */
    private Map<String, String> readParameters(File parameterFile, String simKey) throws IOException, CsvException {

        Stack<File> parameterFiles = new Stack<>();
        parameterFiles.push(parameterFile);

        HashMap<String, String> parameters = new HashMap<>();

        String key;
        String value;
        String parent;

        while (!parameterFiles.empty()) {
            File file = parameterFiles.pop();

            CSVParser parser = new CSVParserBuilder()
                    .withSeparator(',')
                    .withIgnoreQuotations(true)
                    .build();

            CSVReader reader = new CSVReaderBuilder(new FileReader(file))
                    .withSkipLines(1)
                    .withCSVParser(parser)
                    .build();

            List<String[]> lines = reader.readAll();
            reader.close();

            for (String[] line : lines) {

                if (line.length <= 2) {
                    continue;
                }

                key = line[0];
                value = line[1];

                if (key.equals("FILE_PARENT_PROPERTIES") || key.equals("FILE_FILE_PROPERTIES") || key.equals(
                        "FILE_LOGGING_PROPERTIES") || key.equals("FILE_PARAMETER_PROPERTIES") || key.equals(
                        "FILE_DATABASE_PROPERTIES")) {
                    parent = file.getParent();
                    while (value.startsWith("./")) {
                        value = value.substring(2);
                        parent = new File(parent).getParent();
                    }
                    parameterFiles.push(new File(parent, value));
                } else { // this does not overwrite old values!
                    if (!parameters.containsKey(key)) {
                        parameters.put(key, value);
                    }
                }
            }
        }
        //fix the SUMO-dir by appending the simulation run!
        String paramVal = parameters.get("SUMO_DESTINATION_FOLDER");
        paramVal += "_" + simKey;
        parameters.put("SUMO_DESTINATION_FOLDER", paramVal);

        return parameters;
    }
}

