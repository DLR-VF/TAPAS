package de.dlr.ivf.api.io.util;

import de.dlr.ivf.api.io.configuration.model.DataSource;

import java.util.List;
import java.util.stream.Collectors;

public class QueryFactory {

    public static String newInsertQuery(List<String> columnNames, DataSource dataSource){
        //create column definition part: (col1, col2, ...)
        String sqlInsertColumnDefinition = columnNames.stream().collect(Collectors.joining(",","(",")"));
        //create parameterizable part: (?, ?, ...)
        String sqlParameterPart = columnNames.stream().map(c -> "?").collect(Collectors.joining(",","(",")"));

        return "INSERT INTO "+dataSource.getUri()+" "+sqlInsertColumnDefinition+" VALUES "+sqlParameterPart;
    }

    public static String generateUpdateQuery(DataSource dataSource, PreparedStatementContext psContext){

        List<String> columns = psContext.getUpdatableColumnNames();

        if(columns != null){

            //build first part of query: UPDATE someTable SET colName1 = ?, colName2 = ?,...
            String query = "UPDATE "+dataSource.getUri()+" SET "+
                    columns.stream()
                            .map(colName -> colName+" = ?")
                            .collect(Collectors.joining(", "));

            //add where clause
            String whereClause = autogeneratedColumnWhereClause(psContext.getAutogeneratedColumns());

            return "".equals(whereClause) ? query : query+" WHERE "+whereClause;
        }
        return null;
    }

    public static String deleteQuery(DataSource dataSource, PreparedStatementContext psContext){
        String whereClause = autogeneratedColumnWhereClause(psContext.getAutogeneratedColumns());
        String query = "DELETE FROM "+dataSource.getUri();

        return "".equals(whereClause) ? query : query+" WHERE "+whereClause;
    }

    private static String autogeneratedColumnWhereClause(List<String> columnNames){
        return columnNames.stream().map(columnName -> columnName + " = ?").collect(Collectors.joining(" AND "));
    }
}
